{"message":"attempted to define built-in macro more than once","code":{"code":"E0773","explanation":"A builtin-macro was defined more than once.\n\nErroneous code example:\n\n```compile_fail,E0773\n#![feature(decl_macro)]\n#![feature(rustc_attrs)]\n\n#[rustc_builtin_macro]\npub macro test($item:item) {\n    /* compiler built-in */\n}\n\nmod inner {\n    #[rustc_builtin_macro]\n    pub macro test($item:item) {\n        /* compiler built-in */\n    }\n}\n```\n\nTo fix the issue, remove the duplicate declaration:\n\n```\n#![feature(decl_macro)]\n#![feature(rustc_attrs)]\n\n#[rustc_builtin_macro]\npub macro test($item:item) {\n    /* compiler built-in */\n}\n```\n\nIn very rare edge cases, this may happen when loading `core` or `std` twice,\nonce with `check` metadata and once with `build` metadata.\nFor more information, see [#75176].\n\n[#75176]: https://github.com/rust-lang/rust/pull/75176#issuecomment-683234468\n"},"level":"error","spans":[{"file_name":"/home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":45081,"byte_end":45097,"line_start":1310,"line_end":1310,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    macro_rules! cfg {","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previously defined here","code":null,"level":"note","spans":[{"file_name":"/home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":45081,"byte_end":45097,"line_start":1310,"line_end":1310,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    macro_rules! cfg {","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0773]\u001b[0m\u001b[0m\u001b[1m: attempted to define built-in macro more than once\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:1310:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1310\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    macro_rules! cfg {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previously defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:1310:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1310\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    macro_rules! cfg {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the wasm*-unknown-unknown targets are not supported by default, you may need to enable the \"js\" feature. For more information see: https://docs.rs/getrandom/#webassembly-support","code":null,"level":"error","spans":[{"file_name":"/home/nikhil/.cargo/registry/src/github.com-1ecc6299db9ec823/getrandom-0.2.10/src/lib.rs","byte_start":14867,"byte_end":15142,"line_start":285,"line_end":288,"column_start":9,"column_end":73,"is_primary":true,"text":[{"text":"        compile_error!(\"the wasm*-unknown-unknown targets are not supported by \\","highlight_start":9,"highlight_end":81},{"text":"                        default, you may need to enable the \\\"js\\\" feature. \\","highlight_start":1,"highlight_end":78},{"text":"                        For more information see: \\","highlight_start":1,"highlight_end":52},{"text":"                        https://docs.rs/getrandom/#webassembly-support\");","highlight_start":1,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: the wasm*-unknown-unknown targets are not supported by default, you may need to enable the \"js\" feature. For more information see: https://docs.rs/getrandom/#webassembly-support\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nikhil/.cargo/registry/src/github.com-1ecc6299db9ec823/getrandom-0.2.10/src/lib.rs:285:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        compile_error!(\"the wasm*-unknown-unknown targets are not supported by \\\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        default, you may need to enable the \\\"js\\\" feature. \\\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        For more information see: \\\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        https://docs.rs/getrandom/#webassembly-support\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|________________________________________________________________________^\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `sized`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `sized`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `unsize`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `unsize`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `structural_peq`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `structural_peq`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `structural_teq`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `structural_teq`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `copy`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `copy`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `clone`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `clone`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `sync`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `sync`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `discriminant_kind`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `discriminant_kind`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `discriminant_type`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `discriminant_type`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `pointee_trait`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `pointee_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `metadata_type`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `metadata_type`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `dyn_metadata`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `dyn_metadata`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `freeze`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `freeze`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `drop`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `drop`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `destruct`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `destruct`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `coerce_unsized`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `coerce_unsized`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `dispatch_from_dyn`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `dispatch_from_dyn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `transmute_opts`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `transmute_opts`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `transmute_trait`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `transmute_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `add`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `add`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `sub`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `sub`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `mul`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `mul`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `div`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `div`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `rem`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `rem`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `neg`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `neg`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `not`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `not`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `bitxor`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `bitxor`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `bitand`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `bitand`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `bitor`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `bitor`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `shl`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `shl`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `shr`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `shr`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `add_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `add_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `sub_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `sub_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `mul_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `mul_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `div_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `div_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `rem_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `rem_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `bitxor_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `bitxor_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `bitand_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `bitand_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `bitor_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `bitor_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `shl_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `shl_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `shr_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `shr_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `index`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `index`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `index_mut`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `index_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `unsafe_cell`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `unsafe_cell`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `va_list`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `va_list`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `deref`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `deref`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `deref_mut`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `deref_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `deref_target`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `deref_target`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `receiver`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `receiver`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `r#fn`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `r#fn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `fn_mut`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `fn_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `fn_once`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `fn_once`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `fn_once_output`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `fn_once_output`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `future_trait`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `future_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `generator_state`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `generator_state`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `generator`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `generator`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `unpin`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `unpin`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `pin`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `pin`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `eq`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `eq`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `partial_ord`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `partial_ord`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `panic`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `panic`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `panic_nounwind`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `panic_nounwind`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `panic_fmt`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `panic_fmt`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `panic_display`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `panic_display`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `const_panic_fmt`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `const_panic_fmt`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `panic_bounds_check`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `panic_bounds_check`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `panic_info`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `panic_info`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `panic_location`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `panic_location`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `panic_cannot_unwind`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `panic_cannot_unwind`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `format_alignment`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `format_alignment`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `format_argument`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `format_argument`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `format_arguments`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `format_arguments`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `format_count`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `format_count`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `format_placeholder`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `format_placeholder`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `format_unsafe_arg`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `format_unsafe_arg`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `drop_in_place`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `drop_in_place`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `alloc_layout`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `alloc_layout`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `phantom_data`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `phantom_data`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `manually_drop`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `manually_drop`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `maybe_uninit`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `maybe_uninit`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `align_offset`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `align_offset`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Try`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Try`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `tuple_trait`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `tuple_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `slice_len_fn`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `slice_len_fn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `from_residual`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `from_residual`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `from_output`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `from_output`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `branch`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `branch`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `from_yeet`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `from_yeet`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `pointer_like`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `pointer_like`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Poll`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Poll`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Ready`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Ready`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Pending`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Pending`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `ResumeTy`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `ResumeTy`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `identity_future`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `identity_future`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `get_context`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `get_context`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Context`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Context`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `poll`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `poll`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Some`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Some`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `None`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `None`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Ok`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Ok`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Err`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Err`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Continue`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Continue`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Break`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Break`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `into_future`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `into_future`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `into_iter`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `into_iter`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `next`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `next`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `new_unchecked`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `new_unchecked`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `RangeFrom`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `RangeFrom`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `RangeFull`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `RangeFull`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `RangeInclusive`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `RangeInclusive`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `range_inclusive_new`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `range_inclusive_new`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `Range`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `Range`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `RangeToInclusive`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `RangeToInclusive`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"duplicate lang item in crate `core` (which `std` depends on): `RangeTo`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also the [unstable book][1].\n\n[1]: https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `getrandom` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `std` depends on): `RangeTo`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `getrandom` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /home/nikhil/Desktop/rustPolkadot/contract/target/ink/wasm32-unknown-unknown/release/deps/libcore-8f4a2e6c5eb2a38e.rmeta\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /home/nikhil/.rustup/toolchains/1.69-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown/lib/libcore-e7ece9bb26758d19.rlib\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `imp`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/nikhil/.cargo/registry/src/github.com-1ecc6299db9ec823/getrandom-0.2.10/src/lib.rs","byte_start":17259,"byte_end":17262,"line_start":341,"line_end":341,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        imp::getrandom_inner(dest)?;","highlight_start":9,"highlight_end":12}],"label":"use of undeclared crate or module `imp`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `imp`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/nikhil/.cargo/registry/src/github.com-1ecc6299db9ec823/getrandom-0.2.10/src/lib.rs:341:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        imp::getrandom_inner(dest)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `imp`\u001b[0m\n\n"}
{"message":"aborting due to 117 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 117 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0152, E0433, E0773.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0152, E0433, E0773.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0152`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0152`.\u001b[0m\n"}
